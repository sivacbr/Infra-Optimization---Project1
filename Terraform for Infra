#create three ec2 instances
resource "aws_instance" "myinstance_1" {

  ami             = "ami-007855ac798b5175e" # Ubuntu 20.04 LTS // us-east-1

  instance_type   = "t2.medium"

  security_groups = [aws_security_group.instances.name]

}

resource "aws_instance" "myinstance_2" {

  ami             = "ami-007855ac798b5175e" # Ubuntu 20.04 LTS // us-east-1

  instance_type   = "t2.medium"

  security_groups = [aws_security_group.instances.name]

}

resource "aws_instance" "myinstance_3" {

  ami             = "ami-007855ac798b5175e" # Ubuntu 20.04 LTS // us-east-1

  instance_type   = "t2.medium"

  security_groups = [aws_security_group.instances.name]

}

#adding elastic ip to instances
resource "aws_eip" "add_eip-1" {
   instance = aws_instance.myinstance_1.id
   vpc = true
}
resource "aws_eip" "add_eip-2" {
   instance = aws_instance.myinstance_2.id
   vpc = true
}

resource "aws_eip" "add_eip-3" {
   instance = aws_instance.myinstance_3.id
   vpc = true
}

#using the default VPC

data "aws_vpc" "default_vpc" {

  default = true

}

data "aws_subnet_ids" "default_subnet" {

  vpc_id = data.aws_vpc.default_vpc.id

}


# creating security group rules for ingress and egress

resource "aws_security_group" "instances" {

  name = "instance-security-group"

}

resource "aws_security_group_rule" "allow_http_inbound" {

  type              = "ingress"

  security_group_id = aws_security_group.instances.id

  from_port   = 22

  to_port     = 22

  protocol    = "tcp"

  cidr_blocks = ["0.0.0.0/0"]

}
resource "aws_vpc_security_group_egress_rule" "egress" {

  security_group_id = aws_security_group.instances.id

  cidr_ipv4   = "0.0.0.0/0"

  from_port   = 0

  ip_protocol = "-1"

  to_port     = 0

}

#creating key-pair for ssh

resource "aws_key_pair" "my_key" {

  key_name   = "my_key"

  public_key = tls_private_key.rsa.public_key_openssh

}



# RSA key of size 4096 bits

resource "tls_private_key" "rsa" {

  algorithm = "RSA"

  rsa_bits  = 4096

}


#saving pem file locally

resource "local_file" "my_key" {

  content  = tls_private_key.rsa.private_key_pem

  filename = "my_key"

}

#creating target group for load balancer

resource "aws_lb_target_group" "loadbalancer-tg" {

  name     = "load-balancer-tg"

  port     = 80

  protocol = "HTTP"

  vpc_id   =  data.aws_vpc.default_vpc.id

  health_check {

    enabled             = true

    healthy_threshold   = 3

    interval            = 10

    matcher             = 200

    path                = "/"

    port                = "traffic-port"

    protocol            = "HTTP"

    timeout             = 3

    unhealthy_threshold = 2
  }

}

#attaching the target group with the instance

resource "aws_lb_target_group_attachment" "attachment-1" {

  target_group_arn = aws_lb_target_group.loadbalancer-tg.arn

  target_id        = aws_instance.myinstance_1.id
  port             = 80

}

resource "aws_lb_target_group_attachment" "attachment-2" {

  target_group_arn = aws_lb_target_group.loadbalancer-tg.arn

  target_id        = aws_instance.myinstance_2.id
  port             = 80

}
resource "aws_lb_target_group_attachment" "attachment-3" {

  target_group_arn = aws_lb_target_group.loadbalancer-tg.arn

  target_id        = aws_instance.myinstance_3.id
  port             = 80

}
#creating load balancer

resource "aws_lb" "front" {

  name               = "front"

  internal           = false

  load_balancer_type = "application"

  security_groups    = [aws_security_group.instances.id]

  subnets            = ["subnet-03f19e555aed31237", "subnet-03f820adc480f6bcb","subnet-0cfce8fc3eb37b144","subnet-0f73fcd39f09b610c","subnet-005f677309ed38a3f","subnet-071341c37a4c93920"]

  enable_deletion_protection = false

  tags = {

    Environment = "front"

  }

}

#load balancer listener

resource "aws_lb_listener" "front_end" {

  load_balancer_arn = aws_lb.front.arn

  port              = "80"

  protocol          = "HTTP"



  default_action {

    type             = "forward"

    target_group_arn = aws_lb_target_group.loadbalancer-tg.arn

  }

}
